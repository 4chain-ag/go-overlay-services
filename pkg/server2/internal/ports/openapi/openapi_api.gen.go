// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"fmt"
	"net/http"
	"net/url"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Message Human-readable error message
	Message string `json:"message"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = Error

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse = Error

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = Error

// RequestTimeoutResponse defines model for RequestTimeoutResponse.
type RequestTimeoutResponse = Error

// GetLookupServiceProviderDocumentationParams defines parameters for GetLookupServiceProviderDocumentation.
type GetLookupServiceProviderDocumentationParams struct {
	// LookupService The name of the lookup service to retrieve documentation for
	LookupService string `form:"lookupService" json:"lookupService"`
}

// SubmitTransactionParams defines parameters for SubmitTransaction.
type SubmitTransactionParams struct {
	XTopics []string `json:"x-topics"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/admin/syncAdvertisements)
	AdvertisementsSync(c *fiber.Ctx) error

	// (GET /api/v1/getDocumentationForLookupServiceProvider)
	GetLookupServiceProviderDocumentation(c *fiber.Ctx, params GetLookupServiceProviderDocumentationParams) error

	// (POST /api/v1/submit)
	SubmitTransaction(c *fiber.Ctx, params SubmitTransactionParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	handler           ServerInterface
	globalMiddleware  []fiber.Handler
	handlerMiddleware []fiber.Handler
}

// AdvertisementsSync operation middleware
func (siw *ServerInterfaceWrapper) AdvertisementsSync(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{"admin"})

	for _, m := range siw.handlerMiddleware {
		if err := m(c); err != nil {
			return err
		}
	}
	return siw.handler.AdvertisementsSync(c)
}

// GetLookupServiceProviderDocumentation operation middleware
func (siw *ServerInterfaceWrapper) GetLookupServiceProviderDocumentation(c *fiber.Ctx) error {

	var err error

	// Parameter object where we will unmarshal all parameters from the context
	var params GetLookupServiceProviderDocumentationParams

	var query url.Values
	query, err = url.ParseQuery(string(c.Request().URI().QueryString()))
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for query string: %w", err).Error())
	}

	// ------------- Required query parameter "lookupService" -------------

	if paramValue := c.Query("lookupService"); paramValue != "" {

	} else {
		return fiber.NewError(fiber.StatusBadRequest, "A valid lookup service name must be provided to retrieve documentation.")
	}

	err = runtime.BindQueryParameter("form", true, true, "lookupService", query, &params.LookupService)
	if err != nil {
		return fiber.NewError(fiber.StatusBadRequest, fmt.Errorf("Invalid format for parameter lookupService: %w", err).Error())
	}

	for _, m := range siw.handlerMiddleware {
		if err := m(c); err != nil {
			return err
		}
	}
	return siw.handler.GetLookupServiceProviderDocumentation(c, params)
}

// SubmitTransaction operation middleware
func (siw *ServerInterfaceWrapper) SubmitTransaction(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"user"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitTransactionParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "x-topics" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-topics")]; found {
		var XTopics []string

		err = runtime.BindStyledParameterWithOptions("simple", "x-topics", valueList[0], &XTopics, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: true, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, "One or more topics are in an invalid format. Empty string values are not allowed.")
		}

		params.XTopics = XTopics

	} else {
		return fiber.NewError(fiber.StatusBadRequest, "The submitted request does not include required header: x-topics.")
	}

	for _, m := range siw.handlerMiddleware {
		if err := m(c); err != nil {
			return err
		}
	}
	return siw.handler.SubmitTransaction(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL           string
	GlobalMiddleware  []fiber.Handler
	HandlerMiddleware []fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		handler:           si,
		globalMiddleware:  options.GlobalMiddleware,
		handlerMiddleware: options.HandlerMiddleware,
	}

	for _, m := range options.GlobalMiddleware {
		router.Use(m)
	}

	router.Post(options.BaseURL+"/api/v1/admin/syncAdvertisements", wrapper.AdvertisementsSync)

	router.Get(options.BaseURL+"/api/v1/getDocumentationForLookupServiceProvider", wrapper.GetLookupServiceProviderDocumentation)

	router.Post(options.BaseURL+"/api/v1/submit", wrapper.SubmitTransaction)

}
