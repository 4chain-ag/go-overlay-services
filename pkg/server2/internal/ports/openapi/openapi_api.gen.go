// Package openapi provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/oapi-codegen/oapi-codegen/v2 version v2.4.1 DO NOT EDIT.
package openapi

import (
	"net/http"

	"github.com/gofiber/fiber/v2"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "bearerAuth.Scopes"
)

// Error defines model for Error.
type Error struct {
	// Message Human-readable error message
	Message string `json:"message"`
}

// BadRequestResponse defines model for BadRequestResponse.
type BadRequestResponse = Error

// InternalServerErrorResponse defines model for InternalServerErrorResponse.
type InternalServerErrorResponse = Error

// NotFoundResponse defines model for NotFoundResponse.
type NotFoundResponse = Error

// RequestTimeoutResponse defines model for RequestTimeoutResponse.
type RequestTimeoutResponse = Error

// SubmitTransactionParams defines parameters for SubmitTransaction.
type SubmitTransactionParams struct {
	XTopics []string `json:"x-topics"`
}

// ServerInterface represents all server handlers.
type ServerInterface interface {

	// (POST /api/v1/admin/syncAdvertisements)
	AdvertisementsSync(c *fiber.Ctx) error

	// (POST /api/v1/submit)
	SubmitTransaction(c *fiber.Ctx, params SubmitTransactionParams) error
}

// ServerInterfaceWrapper converts contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler     ServerInterface
	AuthHandler fiber.Handler
}

// AdvertisementsSync operation middleware
func (siw *ServerInterfaceWrapper) AdvertisementsSync(c *fiber.Ctx) error {

	c.Context().SetUserValue(BearerAuthScopes, []string{"admin"})

	if err := siw.AuthHandler(c); err != nil {
		return err
	}
	return siw.Handler.AdvertisementsSync(c)
}

// SubmitTransaction operation middleware
func (siw *ServerInterfaceWrapper) SubmitTransaction(c *fiber.Ctx) error {

	var err error

	c.Context().SetUserValue(BearerAuthScopes, []string{"user"})

	// Parameter object where we will unmarshal all parameters from the context
	var params SubmitTransactionParams

	headers := c.GetReqHeaders()

	// ------------- Required header parameter "x-topics" -------------
	if valueList, found := headers[http.CanonicalHeaderKey("x-topics")]; found {
		var XTopics []string

		err = runtime.BindStyledParameterWithOptions("simple", "x-topics", valueList[0], &XTopics, runtime.BindStyledParameterOptions{ParamLocation: runtime.ParamLocationHeader, Explode: true, Required: true})
		if err != nil {
			return fiber.NewError(fiber.StatusBadRequest, "One or more topics are in an invalid format. Empty string values are not allowed.")
		}

		params.XTopics = XTopics

	} else {
		return fiber.NewError(fiber.StatusBadRequest, "The submitted request does not include required header: x-topics.")
	}

	if err := siw.AuthHandler(c); err != nil {
		return err
	}
	return siw.Handler.SubmitTransaction(c, params)
}

// FiberServerOptions provides options for the Fiber server.
type FiberServerOptions struct {
	BaseURL     string
	Middleware  []fiber.Handler
	AuthHandler fiber.Handler
}

// RegisterHandlers creates http.Handler with routing matching OpenAPI spec.
func RegisterHandlers(router fiber.Router, si ServerInterface) {
	RegisterHandlersWithOptions(router, si, FiberServerOptions{AuthHandler: func(c *fiber.Ctx) error { return nil }})
}

// RegisterHandlersWithOptions creates http.Handler with additional options
func RegisterHandlersWithOptions(router fiber.Router, si ServerInterface, options FiberServerOptions) {
	wrapper := ServerInterfaceWrapper{
		Handler:     si,
		AuthHandler: options.AuthHandler,
	}

	for _, m := range options.Middleware {
		router.Use(fiber.Handler(m))
	}

	router.Post(options.BaseURL+"/api/v1/admin/syncAdvertisements", wrapper.AdvertisementsSync)

	router.Post(options.BaseURL+"/api/v1/submit", wrapper.SubmitTransaction)

}
